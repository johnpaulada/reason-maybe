// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function identity(x) {
  return x;
}

function from(x) {
  if (x) {
    return /* Just */[x[0]];
  } else {
    return /* Nothing */0;
  }
}

function map(fn, x) {
  if (x) {
    return /* Just */[Curry._1(fn, x[0])];
  } else {
    return /* Nothing */0;
  }
}

function reduce(fn, x) {
  if (x) {
    return /* Some */[Curry._1(fn, x[0])];
  } else {
    return /* None */0;
  }
}

function chain(fn, x) {
  if (x) {
    var value = reduce(identity, Curry._1(fn, x[0]));
    if (value) {
      return /* Just */[value[0]];
    } else {
      return /* Nothing */0;
    }
  } else {
    return /* Nothing */0;
  }
}

function value($$default, x) {
  if (x) {
    return x[0];
  } else {
    return $$default;
  }
}

function ap(fn, x) {
  if (x && fn) {
    return /* Just */[Curry._1(fn[0], x[0])];
  } else {
    return /* Nothing */0;
  }
}

function branch(left, right, x) {
  if (x) {
    return /* Just */[Curry._1(right, x[0])];
  } else {
    return /* Just */[Curry._1(left, /* () */0)];
  }
}

exports.identity = identity;
exports.from = from;
exports.map = map;
exports.reduce = reduce;
exports.chain = chain;
exports.value = value;
exports.ap = ap;
exports.branch = branch;
/* No side effect */
